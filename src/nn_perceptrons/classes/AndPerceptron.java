package nn_perceptrons.classes;

public class AndPerceptron {
    private int numInputs;
    private double[] weights;
    private double theta;
    private double learnRate;

    //this constructor is used when there are known working weights (do not use for training)
    public AndPerceptron(double[] weights, double theta, double learnRate){
        numInputs = weights.length;
        this.weights = weights;
        this.theta = theta;
        this.learnRate = learnRate;
    }

    //this constructor is used when there are not yet correct parameters generated by training
    public AndPerceptron(double[][] trainingInputs, int[] answers, double learnRate){
        numInputs = trainingInputs[0].length;
        weights = new double[numInputs];
        initializeWeights();
        this.theta = Math.random()-0.5;
        this.learnRate = learnRate;
        train(trainingInputs, answers);
    }

    private void initializeWeights(){
        for (int i = 0; i < numInputs; i++){
            weights[i] = Math.random()-0.5;
        }
    }

    private double updateWeight(double weight, double input, double error){
        return weight + (learnRate * input * error);
    }

    private int activate(double[] inputs, double[] weights){
        double sum = 0;
        //sum the weight of all the synapses (inputs)
        for(int i = 0; i < numInputs; i++){
            sum += inputs[i] * weights[i];
        }
        return activationFunction(sum + theta);
    }

    // uses step function
    private int activationFunction(double sum){
        if (sum >= 0) return 1;
        return 0;
    }

    private void train(double[][] inputs, int[] answers){

    }

}
