package nn_perceptrons.classes;

public class AndPerceptron {
    private int numInputs;
    private double[] weights;
    private double bias;
    private double learnRate;

    //this constructor is used when there are known working weights (do not use for training)
    public AndPerceptron(double[] weights, double bias){
        numInputs = weights.length;
        this.weights = weights;
        this.bias = bias;
    }

    //this constructor is used when there are not yet correct parameters generated by training
    public AndPerceptron(double[][] trainingInputs, int[] answers, double learnRate){
        numInputs = trainingInputs[0].length;
        weights = new double[numInputs];
        initializeWeights(); //assign random values to each weight
        this.bias = Math.random()-0.5;
        this.learnRate = learnRate;
        train(trainingInputs, answers);
    }

    private void initializeWeights(){
        System.out.print("Setting weights: ");
        for (int i = 0; i < numInputs; i++){
            weights[i] = Math.random()-0.5;
            System.out.print("w" +(i+1)+ " --> " + weights[i] + " ");
        }
        System.out.println();
    }

    private double updateWeight(double weight, double input, double error){
        return weight + (learnRate * input * error);
    }

    public int activate(double[] inputs){
        double sum = 0;
        //sum the weight of all the synapses (inputs)
        for(int i = 0; i < numInputs; i++){
            sum += inputs[i] * weights[i];
        }
        return activationFunction(sum + bias);
    }

    // uses step function
    private int activationFunction(double sum){
        if (sum >= 0) return 1;
        return 0;
    }

    private void train(double[][] trainingInputs, int[] answers){
        int correctAnswers;
        int numTestCases = trainingInputs.length;
        double[] inputs = new double[numInputs];

        while(true){
            correctAnswers = 0;
            for (int i = 0; i < numTestCases; i++){
                inputs[0] = trainingInputs[i][0];
                inputs[1] = trainingInputs[i][1];

                int result = activate(inputs);
                int error = (answers[i] - result);
                System.out.println("Error: " +error);

                //update weights if errors are still present
                if (error == 0){
                    correctAnswers++;

                    System.out.println("Corr Ans: " +correctAnswers);
                }
                else{
                    System.out.print("Update w and b: ");
                    for (int w = 0; w < numInputs; w++){
                        weights[w] = updateWeight(weights[w], inputs[w], error);

                        System.out.print("w" +(w+1)+ " --> " +weights[w] + " ");
                    }
                    bias = updateWeight(bias, 1, error);

                    System.out.println("bias --> " +bias);
                }
            }

            if (correctAnswers == numTestCases){
                System.out.println("Training finished.");
                return;
            }
        }
    }







}
